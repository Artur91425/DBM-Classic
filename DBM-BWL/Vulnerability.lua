local mod	= DBM:NewMod("Vulnerability", "DBM-BWL", 1)
local L		= mod:GetLocalizedStrings()

mod:SetRevision("@file-date-integer@")
mod:SetCreatureID(12460, 12461, 14020)
mod:SetModelID(12460)
mod:RegisterCombat("combat")

mod:RegisterEventsInCombat(
	"SPELL_DAMAGE",
	"SPELL_PERIODIC_DAMAGE",
	"CHAT_MSG_MONSTER_EMOTE",
	"PLAYER_TARGET_CHANGED"
)

local warnVuln			= mod:NewAnnounce("WarnVuln")

-- Chromaggus only:
local timerVuln			= mod:NewTimer(17, "TimerVulnCD")-- seen 16.94 - 25.53, avg 21.8

local vulnerabilities = {
	-- [guid]: {topHit, school}
}

function mod:OnCombatStart()
	vulnerabilities = {}
	mod:check_target_vulns()
end

function mod:OnCombatEnd()
	vulnerabilities = {}
end

local vulnMobs = {
	["12460"] = "Death Talon Wyrmguard",
	["12461"] = "Death Talon Overseer",
	["14020"] = "Chromaggus",
}

-- https://wow.gamepedia.com/COMBAT_LOG_EVENT
local spellInfo = {
	[2] =	{"Holy",	{r=255, g=230, b=128},	"135924"},-- Smite
	[4] =	{"Fire",	{r=255, g=128, b=0},	"135808"},-- Pyroblast
	[8] =	{"Nature",	{r=77, g=255, b=77},	"136006"},-- Wrath
	[16] =	{"Frost",	{r=128, g=255, b=255},	"135846"},-- Frostbolt
	[32] =	{"Shadow",	{r=128, g=128, b=255},	"136197"},-- Shadow Bolt
	[64] =	{"Arcane",	{r=255, g=128, b=255},	"136096"},-- Arcane Missiles
}

-- in theory this should only alert on a new vulnerability on your target or when you change target
function mod:update_vulnerability()
	local target = UnitGUID("target")
	local tinfo	= vulnerabilities[target]
	local t, _, _, _, _, npc, _ = strsplit("-", target or "")
	if tinfo == nil or vulnMobs[npc] == nil then
		return
	end

	local info = spellInfo[tinfo[2]]
	local name = L[info[1]] or info[1]

	timerVuln:SetColor(info[2])
	timerVuln:UpdateIcon(info[3])
	timerVuln:UpdateName(name)
	warnVuln.icon = info[3]
	warnVuln:Show(name)
end

function mod:PLAYER_TARGET_CHANGED(msg)
	mod:check_target_vulns()
	mod:update_vulnerability()
end

function mod:CHAT_MSG_MONSTER_EMOTE(msg)
	if (msg == L.VulnEmote or msg:find(L.VulnEmote)) then
		self:SendSync("Vulnerable")
	end
end

local vulnSpells = {
	[22277] = 4,
	[22280] = 8,
	[22278] = 16,
	[22279] = 32,
	[22281] = 64,
}

function mod:check_target_vulns()
	local target = UnitGUID("target")
	local t, _, _, _, _, npc, _ = strsplit("-", target or "")
	if vulnMobs[npc] == nil then
		return
	end

	for i = 1, 32 do
		local spellid = select(10, UnitBuff('target', i))
		local vulnSchool = vulnSpells[spellid]
		if vulnSchool ~= nil then
			return mod:check_spell_damage(target, 10000, vulnSchool, false)
		end
	end
end

function mod:check_spell_damage(target, amount, spellSchool, periodic)
	local topVulnHit = vulnerabilities[target] and vulnerabilities[target][1] or 700
	if amount > topVulnHit then
		DBM:Debug("Update vuln "..tostring(amount)..' > '..tostring(topVulnHit)..' '..tostring(target))
		vulnerabilities[target] = {amount, spellSchool}
		mod:update_vulnerability()
	end
end

function mod:SPELL_DAMAGE(_, _, _, _, destGUID, _, _, _, _, _, spellSchool, amount)
	mod:check_spell_damage(destGUID, amount, spellSchool, false)
end

function mod:SPELL_PERIODIC_DAMAGE(_, _, _, _, destGUID, _, _, _, _, _, spellSchool, amount)
	mod:check_spell_damage(destGUID, amount, spellSchool, true)
end

function mod:OnSync(msg, Name)
	if self:AntiSpam(5, msg) then
		--Do nothing, this is just an antispam threshold for syncing
	end
	if not self:IsInCombat() then return end
	if msg == "Vulnerable" then
		timerVuln:Start()
		vulnerabilities = {}
		mod:check_target_vulns()
	end
end
